@model IEnumerable<ONEE_BE_v2.Models.Candidature>
@{
    ViewData["Title"] = "Candidatures";
}

<h1>Candidatures</h1>
<button id="downloadExcelBtn" class="btn btn-primary">Télécharger en Excel</button>
<input type="date" id="startDatePicker">
<input type="date" id="endDatePicker">
<br />

<br /><select id="offreSelect">
    <option value="">Sélectionnez une offre</option>
</select>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const select = document.getElementById('offreSelect');
        const offres = @Html.Raw(Json.Serialize(ViewBag.Offres));
        offres.forEach(offre => {
            const option = document.createElement('option');
            option.value = offre.id;
            option.textContent = offre.titre;
            select.appendChild(option);
        });
    });
</script>

    <script>
        $(document).ready(function () {
            InitTabulator();
        });

        function InitTabulator() {
            GetCandidatures();
        }

    $(document).ready(function () {
        $('#offreSelect').on('change', function () {
            GetCandidatures();
        });
    });

    function GetCandidatures() {
        try {
            var selectedOffreId = $('#offreSelect').val();
            $.ajax({
                url: '/candidatures/GetCandidatures',
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                success: function (response) {
                    var tabulatorData = response.filter(function (item) {
                        //console.log("Statut de la candidature:", item.offreId);
                        var statusCondition = item.status === "validé" || item.status === "valide";
                        var offreCondition = !selectedOffreId || item.offreId == selectedOffreId;
                        return statusCondition && offreCondition;
                    });
                    var table = new Tabulator("#tabulatorContainer", {
                        data: tabulatorData,
                        layout: "fitColumns",
                        columns: [
                            { title: "Id", field: "id", headerFilter: true },
                            { title: "Nom", field: "nom", headerFilter: true },
                            { title: "Prénom", field: "prenom", headerFilter: true },
                            { title: "Email", field: "email", headerFilter: true },
                            { title: "Mot de passe", field: "motdepasse", headerFilter: true },
                            {
                                title: "Date Postulation",
                                field: "datepostulation",
                                headerFilter: true,
                                formatter: function (cell, formatterParams, onRendered) {
                                    var date = new Date(cell.getValue());
                                    var day = date.getDate();
                                    var month = date.getMonth() + 1; // Les mois vont de 0 à 11, donc on ajoute 1.
                                    var year = date.getFullYear();

                                    // Formater les valeurs pour qu'elles aient toujours deux chiffres
                                    if (day < 10) {
                                        day = '0' + day;
                                    }
                                    if (month < 10) {
                                        month = '0' + month;
                                    }

                                    // Concaténer dans le format désiré : jour-mois-année
                                    return day + '-' + month + '-' + year;
                                }
                            },
                            { title: "Ville", field: "ville", headerFilter: true },
                            { title: "Adresse", field: "adresse", headerFilter: true },
                            { title: "Emploi précédent", field: "emploiprecedent", headerFilter: true },
                            {
                                title: "Actions",
                                formatter: function (cell, formatterParams) {
                                    var id = cell.getRow().getData().id;
                                    var detailsBtn = "<a href='/candidatures/Details/" + id + "' class='btn btn-primary btn-sm'><i class='fa fa-eye'></i> Details</a>";
                                    var cinBtn = "<a href='/candidatures/DocumentCin?candidatureId=" + id + "' class='btn btn-info btn-sm'><i class='fa fa-file'></i> CIN</a>";
                                    var diplomeBtn = "<a href='/candidatures/DocumentDiplome?candidatureId=" + id + "' class='btn btn-success btn-sm'><i class='fa fa-file'></i> Diplome</a>";
                                    var cvBtn = "<a href='/candidatures/DocumentCv?candidatureId=" + id + "' class='btn btn-warning btn-sm'><i class='fa fa-file'></i> CV</a>";

                                    return "<div class='action-buttons'>" + detailsBtn + cinBtn + diplomeBtn + cvBtn + "</div>";
                                }
                            }
                        ]
                    });
                },
                error: function (xhr, status, error) {
                    throw new Error('Impossible d\'afficher les offres : ' + error);
                }
            });
        } catch (error) {
            console.error(error);
            alert(error.message);
        }
    }


    document.getElementById('downloadExcelBtn').addEventListener('click', function () {
        //probleme pour 08-06-2024 vers 13-06-2024
        try {
            let startDate = document.getElementById('startDatePicker').value;
            let endDate = document.getElementById('endDatePicker').value;

            let data = {
                startDate: startDate,
                endDate: endDate
            };

            let startDateArray = startDate.split("-");
            let endDateArray = endDate ? endDate.split("-") : startDateArray;
            data.startDate = startDateArray[0] + "-" + startDateArray[1] + "-" + startDateArray[2];
            data.endDate = endDateArray[0] + "-" + endDateArray[1] + "-" + endDateArray[2];

            $.ajax({
                url: '/candidatures/GetCandidatures',
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                data: data,
                success: function (response) {
                    let tabulatorData = response;
                    var selectedOffreId = $('#offreSelect').val();

                    if (startDate && !endDate) {
                        tabulatorData = response.filter(function (item) {
                            let itemDate = new Date(item.datepostulation);
                            let startDateObj = new Date(startDate);
                            return itemDate.getFullYear() === startDateObj.getFullYear() &&
                                itemDate.getMonth() === startDateObj.getMonth() &&
                                itemDate.getDate() === startDateObj.getDate() &&
                                (item.status === "validé" || item.status === "valide") &&
                                (!selectedOffreId || item.offreId == selectedOffreId);
                        });
                    } else if (startDate && endDate) {
                        tabulatorData = response.filter(function (item) {
                            let itemDate = new Date(item.datepostulation).getTime();
                            let startDateObj = new Date(startDate).getTime();
                            let endDateObj = new Date(endDate).getTime() + 86400000;
                            return (itemDate >= startDateObj && itemDate < endDateObj) &&
                                (item.status === "validé" || item.status === "valide") &&
                                (!selectedOffreId || item.offreId == selectedOffreId);
                        });
                    } else if (!startDate && endDate) {
                        tabulatorData = response.filter(function (item) {
                            let itemDate = new Date(item.datepostulation);
                            let endDateObj = new Date(endDate);
                            return itemDate.getFullYear() === endDateObj.getFullYear() &&
                                itemDate.getMonth() === endDateObj.getMonth() &&
                                itemDate.getDate() === endDateObj.getDate() &&
                                (item.status === "validé" || item.status === "valide") &&
                                (!selectedOffreId || item.offreId == selectedOffreId);
                        });
                    } else {
                        tabulatorData = response.filter(function (item) {
                            return (item.status === "validé" || item.status === "valide") &&
                                (!selectedOffreId || item.offreId == selectedOffreId);
                        });
                    }

                    let csvData = "Nom,Prénom,Email,Date Postulation,Ville,Adresse,Emploi précédent,Nom du Père,Nom de la Mère,Date de Naissance,Statut Familial,Description\n";
                    tabulatorData.forEach(function (item) {
                        csvData += item.nom + "," + item.prenom + "," + item.email + "," + formatDate(item.datepostulation) + "," + item.ville + "," + item.adresse + "," + item.emploiprecedent + "," + item.nompere + "," + item.nommere + "," + formatDate(item.datenaissance) + "," + item.statusfamiliale + "," + item.description + "\n";
                    });

                    const blob = new Blob([csvData], { type: 'text/csv' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;

                    let fileName;
                    if (startDate && endDate) {
                        fileName = 'Candidatures_Validées_' + startDate + '_to_' + endDate + '.csv';
                    } else {
                        const today = new Date();
                        fileName = 'Candidatures_Validées_' + today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + '_' + today.getHours() + '-' + today.getMinutes() + '-' + today.getSeconds() + '.csv';
                    }
                    a.download = fileName;

                    document.body.appendChild(a);
                    a.click();

                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                },
                error: function (xhr, status, error) {
                    throw new Error('Impossible d\'afficher les offres : ' + error);
                }
            });
        } catch (error) {
            console.error(error);
            alert(error.message);
        }
    });

    function formatDate(dateString) {
        // probleme 1/1/2024 et pas 01/01/2024
        dateString = dateString.replace(/\//g, '-');
        // Analyser la date en utilisant les délimiteurs '-' ou '/' pour obtenir les composants de la date
        const dateComponents = dateString.split(/-|\//);
        // Récupérer les composants de la date (jour, mois, année)
        let day, month, year;
        let formattedDay, formattedMonth; // Déclarer les variables à l'extérieur des blocs if/else
        // Vérifier le format de la date
        if (dateComponents.length === 3) {
            // Si le premier composant est supérieur à 12, c'est probablement l'année
            if (parseInt(dateComponents[0]) > 12) {
                year = parseInt(dateComponents[0]);
                month = parseInt(dateComponents[1]);
                day = parseInt(dateComponents[2]);
            } else {
                day = parseInt(dateComponents[0]);
                month = parseInt(dateComponents[1]);
                year = parseInt(dateComponents[2]);
            }
            // Formater le jour avec un zéro initial si nécessaire
            formattedDay = day < 10 ? '0' + day : day;
            // Formater le mois avec un zéro initial si nécessaire
            formattedMonth = month < 10 ? '0' + month : month;
        }
        // Si la date est en format j/m/a ou j-m-a, renvoyer le format jj/mm/aaaa
        if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
            // Utiliser le format jj/mm/aaaa
            return formattedDay + '/' + formattedMonth + '/' + year;
        } else {
            return dateString; // Renvoie la date telle quelle si elle ne peut pas être analysée
        }
    }


    </script>

<link rel="stylesheet" href="~/css//site.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
<link href="https://unpkg.com/tabulator-tables@5.4.3/dist/css/tabulator.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.4.3/dist/js/tabulator.min.js"></script>

<!--<input type="text" class="form-control" id="searchInput1" placeholder="Rechercher des candidatures">-->
<div style="margin-top: 30px;"></div>
<div id="tabulatorContainer"></div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.1.0/js/tabulator.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.1.0/js/modules/virtual-dom/vertical.js"></script>
}