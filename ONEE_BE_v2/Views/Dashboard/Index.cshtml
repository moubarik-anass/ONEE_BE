@{
    ViewData["Title"] = "Dashboard";
}
<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .dashboard {
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 20px;
            background-color: #f4f4f4;
        }

        .dashboard-item {
            width: 20%;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

            .dashboard-item:nth-child(1) {
                background-color: #3498db;
                color: #fff;
            }

            .dashboard-item:nth-child(2) {
                background-color: #27ae60;
                color: #fff;
            }

            .dashboard-item:nth-child(3) {
                background-color: #e74c3c;
                color: #fff;
            }

            .dashboard-item:nth-child(4) {
                background-color: #f1c40f;
                color: #fff;
            }

            .dashboard-item h2 {
                margin: 10px 0;
                font-size: 24px;
            }

            .dashboard-item p {
                margin: 0;
                font-size: 18px;
            }

        .chart-section {
            margin: 20px;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .chart-container {
            width: 100%;
            max-width: 500px;
            margin: 0 auto;
        }

        canvas {
            max-width: 100%;
            height: auto;
        }
    </style>
</head>
<body>

    <div class="dashboard">
        <div id="active-offers" class="dashboard-item">
            <h2><i class="fas fa-check-circle"></i> Offres actives</h2>
            <p>Loading...</p>
        </div>
        <div id="validated-applications" class="dashboard-item">
            <h2><i class="fas fa-thumbs-up"></i> Candidatures validées</h2>
            <p>Loading...</p>
        </div>
        <div id="non-validated-applications" class="dashboard-item">
            <h2><i class="fas fa-times-circle"></i> Candidatures non validées</h2>
            <p>Loading...</p>
        </div>
        <div id="pending-applications" class="dashboard-item">
            <h2><i class="fas fa-clock"></i> Candidatures en cours de traitement</h2>
            <p>Loading...</p>
        </div>
    </div>

    <div class="chart-section">
        <h2>Line Chart</h2>
        <div class="chart-container">
            <canvas id="lineChart"></canvas>
        </div>
    </div>

    <div class="chart-section">
        <h2>Doughnut Chart</h2>
        <div class="chart-container">
            <canvas id="doughnutChart"></canvas>
        </div>
    </div>

    <div class="chart-section">
        <h2>Pie Chart</h2>
        <div class="chart-container">
            <canvas id="pieChart"></canvas>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            async function fetchData(url, elementId) {
                try {
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    document.getElementById(elementId).querySelector('p').innerText = data;
                    return data;
                } catch (error) {
                    document.getElementById(elementId).querySelector('p').innerText = 'Error';
                    console.error(`Error fetching ${url}:`, error);
                    return 0;
                }
            }

            async function fetchApplicationsPerMonth(status) {
                try {
                    const response = await fetch(`/Dashboard/Get${status}ApplicationsPerMonth`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return await response.json();
                } catch (error) {
                    console.error(`Error fetching ${status} applications per month:`, error);
                    return [];
                }
            }

            // Fetch data for dashboard items
            const [activeOffers, validatedApplications, nonValidatedApplications, pendingApplications] = await Promise.all([
                fetchData('/Dashboard/GetActiveOffersCount', 'active-offers'),
                fetchData('/Dashboard/GetValidatedApplicationsCount', 'validated-applications'),
                fetchData('/Dashboard/GetNonValidatedApplicationsCount', 'non-validated-applications'),
                fetchData('/Dashboard/GetPendingApplicationsCount', 'pending-applications')
            ]);

            // Fetch data for applications per month
            const [validatedPerMonth, nonValidatedPerMonth, pendingPerMonth] = await Promise.all([
                fetchApplicationsPerMonth('Validated'),
                fetchApplicationsPerMonth('NonValidated'),
                fetchApplicationsPerMonth('Pending')
            ]);

            // Initialize Chart.js charts
            const lineCtx = document.getElementById('lineChart').getContext('2d');
            const doughnutCtx = document.getElementById('doughnutChart').getContext('2d');
            const pieCtx = document.getElementById('pieChart').getContext('2d');

            // Prepare data for line chart
            const months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
            const lineChartData = {
                labels: months,
                datasets: [
                    {
                        label: 'Candidatures validées',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        data: months.map((_, index) =>
                            validatedPerMonth.find(item => item.month === index + 1)?.count || 0
                        )
                    },
                    {
                        label: 'Candidatures non validées',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        data: months.map((_, index) =>
                            nonValidatedPerMonth.find(item => item.month === index + 1)?.count || 0
                        )
                    },
                    {
                        label: 'Candidatures en cours',
                        backgroundColor: 'rgba(255, 206, 86, 0.2)',
                        borderColor: 'rgba(255, 206, 86, 1)',
                        data: months.map((_, index) =>
                            pendingPerMonth.find(item => item.month === index + 1)?.count || 0
                        )
                    }
                ]
            };

            const doughnutChartData = {
                labels: ['Candidatures validées', 'Candidatures non validées', 'Candidatures en cours de traitement'],
                datasets: [{
                    label: 'Candidatures',
                    backgroundColor: ['rgba(54, 162, 235, 0.2)', 'rgba(255, 99, 132, 0.2)', 'rgba(255, 206, 86, 0.2)'],
                    borderColor: ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)', 'rgba(255, 206, 86, 1)'],
                    data: [validatedApplications, nonValidatedApplications, pendingApplications]
                }]
            };

            const pieChartData = {
                labels: ['Candidatures validées', 'Candidatures non validées', 'Candidatures en cours de traitement'],
                datasets: [{
                    label: 'Candidatures',
                    backgroundColor: ['rgba(54, 162, 235, 0.2)', 'rgba(255, 99, 132, 0.2)', 'rgba(255, 206, 86, 0.2)'],
                    borderColor: ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)', 'rgba(255, 206, 86, 1)'],
                    data: [validatedApplications, nonValidatedApplications, pendingApplications]
                }]
            };

            new Chart(lineCtx, {
                type: 'line',
                data: lineChartData,
                options: {
                    scales: {
                        x: {
                            ticks: {
                                callback: function (value, index, ticks) {
                                    return Number.isInteger(index) ? months[index] : '';
                                }
                            }
                        }
                    }
                }
            });

            new Chart(doughnutCtx, {
                type: 'doughnut',
                data: doughnutChartData,
                options: {}
            });

            new Chart(pieCtx, {
                type: 'pie',
                data: pieChartData,
                options: {}
            });
        });
    </script>

</body>
</html>
